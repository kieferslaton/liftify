{"ast":null,"code":"var _jsxFileName = \"/Users/kieferslaton/workout/client/src/components/Exercise.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Set from './Set';\n\nconst Exercise = ({\n  plan,\n  workoutDay,\n  name\n}) => {\n  const [sets, setSets] = useState([]);\n  const [sumReps, setSumReps] = useState();\n  const exercise = plan.days.find(day => day.date === workoutDay).exercises.find(exercise => exercise.name === name);\n\n  const passback = async (reps, isComplete, i) => {\n    setSets([...sets.filter(set => set.i !== i), {\n      reps: reps,\n      isComplete: isComplete,\n      i: i\n    }]);\n  };\n\n  useEffect(() => {\n    repAdd(sets);\n  }, [sets]);\n\n  const repAdd = sets => {\n    let sum = 0;\n    sets.forEach(set => {\n      sum += set.reps;\n    });\n    setSumReps(sum);\n  };\n\n  const isEnabled = j => {\n    return j === 0 ? true : sets.filter(set => set.i === j - 1)[0] ? sets.filter(set => set.i === j - 1)[0].isComplete : false;\n  };\n\n  const renderSets = (sets, reps) => {\n    let row = [];\n\n    for (let i = 0; i < sets; i++) {\n      row.push( /*#__PURE__*/React.createElement(Set, {\n        i: i,\n        startingReps: reps,\n        passback: passback,\n        enabled: isEnabled(i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Row, {\n      className: \"my-3 justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 16\n      }\n    }, row);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, exercise.name), renderSets(exercise.sets, exercise.reps), JSON.stringify(sets), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 35\n    }\n  }), sumReps, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 22\n    }\n  }));\n};\n\nexport default Exercise;","map":{"version":3,"sources":["/Users/kieferslaton/workout/client/src/components/Exercise.js"],"names":["React","useState","useEffect","Row","Col","Set","Exercise","plan","workoutDay","name","sets","setSets","sumReps","setSumReps","exercise","days","find","day","date","exercises","passback","reps","isComplete","i","filter","set","repAdd","sum","forEach","isEnabled","j","renderSets","row","push","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\n\nimport Set from './Set'\n\nconst Exercise = ({plan, workoutDay, name}) => {\n    const [sets, setSets] = useState([])\n    const [sumReps, setSumReps] = useState()\n\n    const exercise = plan.days.find(day => day.date === workoutDay).exercises.find(exercise => exercise.name === name)\n\n    \n    const passback = async (reps, isComplete, i) => {\n        setSets([...sets.filter(set => set.i !== i), {\n            reps: reps, \n            isComplete: isComplete, \n            i: i\n        }])\n    }\n\n    useEffect(() => {\n        repAdd(sets)\n    }, [sets])\n\n    const repAdd = (sets) => {\n        let sum = 0\n        sets.forEach(set => {\n            sum+=set.reps\n        })\n        setSumReps(sum)\n    }\n\n    const isEnabled = (j) => {\n        return(\n        j === 0 ? true : (sets.filter(set => set.i === j-1)[0] ? (sets.filter(set => set.i === j-1)[0].isComplete) : false)\n        )\n    }\n\n    const renderSets = (sets, reps) => {\n        let row = []\n        for (let i = 0; i < sets; i++){\n            row.push(\n                <Set i={i} startingReps={reps} passback={passback} enabled={isEnabled(i)}/>\n            )\n        }\n        return <Row className=\"my-3 justify-content-center\">{row}</Row>\n    } \n\n    return (\n        <>\n            <Row className=\"my-3\">{exercise.name}</Row>\n            {renderSets(exercise.sets, exercise.reps)}\n            {JSON.stringify(sets)}<br />\n            {sumReps}<br />\n            </>\n    )\n}\n\nexport default Exercise"]},"metadata":{},"sourceType":"module"}