{"ast":null,"code":"var _jsxFileName = \"/Users/kieferslaton/workout/client/src/components/Exercise.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport moment from 'moment';\nimport Set from './Set';\n\nconst Exercise = ({\n  plan,\n  workoutDay,\n  name,\n  refreshPlan\n}) => {\n  const day = plan.days.find(day => day.date === workoutDay);\n  const exercise = day.exercises.find(exercise => exercise.name === name);\n  const exerciseIndex = day.exercises.findIndex(exercise => exercise.name === name);\n  const [sets, setSets] = useState(exercise.sets);\n  const [sumReps, setSumReps] = useState();\n\n  const passback = (completeReps, isComplete, i) => {\n    const newSets = sets;\n    newSets[i] = {\n      reps: completeReps,\n      complete: isComplete\n    };\n    setSets(newSets);\n    console.log(sets);\n  };\n\n  const updatePlan = () => {\n    if (sumReps > sets.length * 10) {\n      let newPlan = plan;\n      newPlan.days.forEach(planDay => {\n        if (planDay.number === day.number && moment(planDay.date) > moment(day.date)) {\n          console.log(planDay);\n\n          if (planDay.exercises[exerciseIndex].sets.length === sets.length) {\n            planDay.exercises[exerciseIndex].sets.push({\n              reps: sets[0].reps,\n              complete: false\n            });\n          }\n        }\n      });\n      console.log(newPlan);\n    }\n\n    refreshPlan(newPlan);\n  };\n\n  useEffect(() => {\n    updatePlan();\n  }, [sumReps]);\n\n  const repAdd = () => {\n    let sum = 0;\n    sets.forEach(set => {\n      set.complete ? sum += set.reps : sum = sum;\n    });\n    setSumReps(sum);\n    console.log(sum);\n    console.log(sumReps);\n  };\n\n  const isEnabled = j => {\n    return j === 0 ? true : sets[j - 1] ? sets[j - 1].complete : false;\n  };\n\n  const renderSets = sets => {\n    let row = [];\n\n    for (let i = 0; i < sets.length; i++) {\n      row.push( /*#__PURE__*/React.createElement(Set, {\n        i: i,\n        startingReps: sets[i].reps,\n        complete: sets[i].complete,\n        passback: passback,\n        enabled: isEnabled(i),\n        repAdd: repAdd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Row, {\n      className: \"my-3 justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 16\n      }\n    }, row);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, exercise.name), renderSets(exercise.sets), JSON.stringify(sets), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 35\n    }\n  }), sumReps, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 22\n    }\n  }));\n};\n\nexport default Exercise;","map":{"version":3,"sources":["/Users/kieferslaton/workout/client/src/components/Exercise.js"],"names":["React","useState","useEffect","Row","Col","moment","Set","Exercise","plan","workoutDay","name","refreshPlan","day","days","find","date","exercise","exercises","exerciseIndex","findIndex","sets","setSets","sumReps","setSumReps","passback","completeReps","isComplete","i","newSets","reps","complete","console","log","updatePlan","length","newPlan","forEach","planDay","number","push","repAdd","sum","set","isEnabled","j","renderSets","row","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport moment from 'moment'\n\nimport Set from './Set'\n\nconst Exercise = ({plan, workoutDay, name, refreshPlan}) => {\n\n    const day = plan.days.find(day => day.date === workoutDay)\n    const exercise = day.exercises.find(exercise => exercise.name === name)\n    const exerciseIndex = day.exercises.findIndex(exercise => exercise.name === name)\n\n    const [sets, setSets] = useState(exercise.sets)\n    const [sumReps, setSumReps] = useState()\n    \n    const passback = (completeReps, isComplete, i) => {\n        const newSets = sets\n        newSets[i] = {\n            reps: completeReps, \n            complete: isComplete\n        }\n        setSets(newSets)\n        console.log(sets)\n    }\n\n    const updatePlan = () => {\n        if (sumReps > sets.length * 10) {\n            let newPlan = plan\n            newPlan.days.forEach(planDay => {\n                if (planDay.number === day.number && moment(planDay.date) > moment(day.date)){\n                    console.log(planDay)\n                    if (planDay.exercises[exerciseIndex].sets.length === sets.length){\n                    planDay.exercises[exerciseIndex].sets.push({\n                        reps: sets[0].reps, \n                        complete: false\n                    })\n                }\n                }\n            })\n            console.log(newPlan)\n\n        }\n\n        refreshPlan(newPlan)\n    }\n\n    useEffect(() => {\n        updatePlan()\n    }, [sumReps])\n\n    const repAdd = () => {\n        let sum = 0\n        sets.forEach(set => {\n            set.complete ? sum+=set.reps : sum=sum\n        })\n        setSumReps(sum)\n        console.log(sum)\n        console.log(sumReps)\n    }\n\n    const isEnabled = (j) => {\n        return(\n        j === 0 ? true : (sets[j-1] ? (sets[j-1].complete) : false)\n        )\n    }\n\n    const renderSets = (sets) => {\n        let row = []\n        for (let i = 0; i < sets.length; i++){\n            row.push(\n                <Set i={i} startingReps={sets[i].reps} complete={sets[i].complete} passback={passback} enabled={isEnabled(i)} repAdd={repAdd}/>\n            )\n        }\n        return <Row className=\"my-3 justify-content-center\">{row}</Row>\n    } \n\n    return (\n        <>\n            <Row className=\"my-3\">{exercise.name}</Row>\n            {renderSets(exercise.sets)}\n            {JSON.stringify(sets)}<br />\n            {sumReps}<br />\n            </>\n    )\n}\n\nexport default Exercise"]},"metadata":{},"sourceType":"module"}