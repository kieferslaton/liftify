{"ast":null,"code":"var _jsxFileName = \"/Users/kieferslaton/workout/client/src/components/Exercise.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport moment from 'moment';\nimport Set from './Set';\n\nconst Exercise = ({\n  plan,\n  workoutDay,\n  name,\n  refreshPlan\n}) => {\n  const day = plan.days.find(day => day.date === workoutDay);\n  const nextWeek = plan.days.find(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'));\n  const nextWeekIndex = plan.days.findIndex(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'));\n  const exercise = day.exercises.find(exercise => exercise.name === name);\n  const nextWeekExercise = nextWeek ? nextWeek.exercises.find(exercise => exercise.name === name) : '';\n  const nextWeekExerciseIndex = nextWeek ? nextWeek.exercises.findIndex(exercise => exercise.name == name) : '';\n  const [sets, setSets] = useState(exercise.sets);\n  const [sumReps, setSumReps] = useState();\n\n  const passback = (completeReps, isComplete, i) => {\n    const newSets = sets;\n    newSets[i] = {\n      reps: completeReps,\n      complete: isComplete\n    };\n    setSets(newSets);\n    console.log(sets);\n  };\n\n  const updatePlan = () => {\n    if (!nextWeek) {\n      return;\n    } else {\n      let newExercise = {\n        name: nextWeekExercise.name,\n        sets: nextWeekExercise.sets,\n        weight: nextWeekExercise.weight\n      };\n\n      if (sumReps > 30) {\n        newExercise.sets.push({\n          reps: nextWeekExercise.sets[0].reps,\n          complete: false\n        });\n      }\n\n      let newDay = {\n        name: nextWeek.name,\n        date: nextWeek.date,\n        exercises: nextWeek.exercises\n      };\n      newDay.exercises[nextWeekExerciseIndex] = newExercise;\n      let newPlan = {\n        _id: plan._id,\n        name: plan.name,\n        startDate: plan.startDate,\n        user: plan.user,\n        days: plan.days\n      };\n      newPlan.days[nextWeekIndex] = newDay;\n      refreshPlan(newPlan);\n    }\n  };\n\n  useEffect(() => {\n    updatePlan();\n  }, [sumReps]);\n\n  const repAdd = () => {\n    let sum = 0;\n    sets.forEach(set => {\n      set.complete ? sum += set.reps : sum = sum;\n    });\n    setSumReps(sum);\n    console.log(sum);\n    console.log(sumReps);\n  };\n\n  const isEnabled = j => {\n    return j === 0 ? true : sets[j - 1] ? sets[j - 1].complete : false;\n  };\n\n  const renderSets = sets => {\n    let row = [];\n\n    for (let i = 0; i < sets.length; i++) {\n      row.push( /*#__PURE__*/React.createElement(Set, {\n        i: i,\n        startingReps: sets[i].reps,\n        complete: sets[i].complete,\n        passback: passback,\n        enabled: isEnabled(i),\n        repAdd: repAdd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Row, {\n      className: \"my-3 justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 16\n      }\n    }, row);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, exercise.name), renderSets(exercise.sets), JSON.stringify(sets), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 35\n    }\n  }), sumReps, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 22\n    }\n  }));\n};\n\nexport default Exercise;","map":{"version":3,"sources":["/Users/kieferslaton/workout/client/src/components/Exercise.js"],"names":["React","useState","useEffect","Row","Col","moment","Set","Exercise","plan","workoutDay","name","refreshPlan","day","days","find","date","nextWeek","add","format","nextWeekIndex","findIndex","exercise","exercises","nextWeekExercise","nextWeekExerciseIndex","sets","setSets","sumReps","setSumReps","passback","completeReps","isComplete","i","newSets","reps","complete","console","log","updatePlan","newExercise","weight","push","newDay","newPlan","_id","startDate","user","repAdd","sum","forEach","set","isEnabled","j","renderSets","row","length","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport moment from 'moment'\n\nimport Set from './Set'\n\nconst Exercise = ({plan, workoutDay, name, refreshPlan}) => {\n\n    const day = plan.days.find(day => day.date === workoutDay)\n    const nextWeek = plan.days.find(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'))\n    const nextWeekIndex = plan.days.findIndex(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'))\n    const exercise = day.exercises.find(exercise => exercise.name === name)\n    const nextWeekExercise = nextWeek ? nextWeek.exercises.find(exercise => exercise.name === name) : ''\n    const nextWeekExerciseIndex = nextWeek ? nextWeek.exercises.findIndex(exercise => exercise.name == name) : ''\n\n    const [sets, setSets] = useState(exercise.sets)\n    const [sumReps, setSumReps] = useState()\n    \n    const passback = (completeReps, isComplete, i) => {\n        const newSets = sets\n        newSets[i] = {\n            reps: completeReps, \n            complete: isComplete\n        }\n        setSets(newSets)\n        console.log(sets)\n    }\n\n    const updatePlan = () => {\n        if(!nextWeek){\n            return\n        } else {\n        let newExercise = {\n            name: nextWeekExercise.name, \n            sets: nextWeekExercise.sets,\n            weight: nextWeekExercise.weight, \n        }\n        if (sumReps > 30) {\n            newExercise.sets.push({\n                reps: nextWeekExercise.sets[0].reps, \n                complete: false\n            })\n        }\n\n        let newDay = {\n            name : nextWeek.name, \n            date: nextWeek.date, \n            exercises: nextWeek.exercises\n        }\n\n        newDay.exercises[nextWeekExerciseIndex] = newExercise\n\n        let newPlan = {\n            _id: plan._id, \n            name: plan.name,\n            startDate: plan.startDate, \n            user: plan.user,\n            days: plan.days\n        }\n\n        newPlan.days[nextWeekIndex] = newDay\n\n        refreshPlan(newPlan)\n        }\n    }\n\n    useEffect(() => {\n        updatePlan()\n    }, [sumReps])\n\n    const repAdd = () => {\n        let sum = 0\n        sets.forEach(set => {\n            set.complete ? sum+=set.reps : sum=sum\n        })\n        setSumReps(sum)\n        console.log(sum)\n        console.log(sumReps)\n    }\n\n    const isEnabled = (j) => {\n        return(\n        j === 0 ? true : (sets[j-1] ? (sets[j-1].complete) : false)\n        )\n    }\n\n    const renderSets = (sets) => {\n        let row = []\n        for (let i = 0; i < sets.length; i++){\n            row.push(\n                <Set i={i} startingReps={sets[i].reps} complete={sets[i].complete} passback={passback} enabled={isEnabled(i)} repAdd={repAdd}/>\n            )\n        }\n        return <Row className=\"my-3 justify-content-center\">{row}</Row>\n    } \n\n    return (\n        <>\n            <Row className=\"my-3\">{exercise.name}</Row>\n            {renderSets(exercise.sets)}\n            {JSON.stringify(sets)}<br />\n            {sumReps}<br />\n            </>\n    )\n}\n\nexport default Exercise"]},"metadata":{},"sourceType":"module"}