{"ast":null,"code":"var _jsxFileName = \"/Users/kieferslaton/workout/client/src/components/PlanForm.js\";\nimport React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport moment from 'moment';\nimport axios from 'axios';\n\nconst PlanForm = ({\n  user,\n  passUpPlan\n}) => {\n  const [benchVal, setBenchVal] = useState('');\n  const [squatVal, setSquatVal] = useState('');\n  const [date, setDate] = useState('');\n  const [days, setDays] = useState([]);\n\n  const handleCheckToggle = val => {\n    if (!days.includes(val)) {\n      if (days.length <= 4) {\n        setDays([...days, val]);\n      } else {\n        let newDays = days.splice(-1, 1);\n        console.log(newDays);\n        newDays.push(val);\n        setDays(newDays);\n      }\n    } else {\n      setDays(days.filter(day => day !== val));\n    }\n\n    console.log(days);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(benchVal, squatVal, date, days);\n    let plan = {};\n    plan.startDate = date.startOfWeek();\n    plan.user = user.username;\n    plan.days = []; //First Mesocycle\n\n    let firstCycleWeeks = 5;\n\n    for (let i = 0; i < firstCycleWeeks; i++) {\n      const startOfWeek = moment(date).add(i * 7, 'days');\n      days.forEach((day, index) => {\n        let name;\n        let number;\n        let exercises = [];\n        const dayDate = moment(startOfWeek).add(day, 'days');\n\n        if (index === 0) {\n          name = \"Chest \" + (i + 1);\n          number = 1;\n          exercises = [{\n            name: \"Incline Dumbbell Press\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.35 / 5) * 5\n          }, {\n            name: \"Dumbbell Overhead Extension\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.35 / 5) * 5\n          }, {\n            name: \"Flat Bench Press\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.8 / 5) * 5\n          }, {\n            name: \"1-Arm Dumbbell Row\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.4 / 5) * 5\n          }, {\n            name: \"Pullup\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal / 5) * 5\n          }, {\n            name: \"Dumbbell Lateral Raise\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.075 / 5) * 5\n          }];\n        } else if (index === 1) {\n          name = \"Quads \" + (i + 1);\n          number = 2;\n          exercises = [{\n            name: \"Close Stance Squat\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(squatVal * 0.8 / 5) * 5\n          }, {\n            name: \"Front Squat\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(squatVal * 0.75 / 5) * 5\n          }, {\n            name: \"Single Leg Curl\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(squatVal * 0.25 / 5) * 5\n          }, {\n            name: \"Calf Raises\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(squatVal * 0.7 / 5) * 5\n          }, {\n            name: \"Cable Tricep Pushdown\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.7 / 5) * 5\n          }, {\n            name: \"Seated Dumbbell Shoulder Press\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.25 / 5) * 5\n          }];\n        } else if (index === 2) {\n          name = \"Back \" + (i + 1);\n          number = 3;\n          exercises = [{\n            name: \"Chin-up\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal / 5) * 5\n          }, {\n            name: \"Lat Pulldown\",\n            sets: [{\n              reps: 12,\n              complete: false\n            }, {\n              reps: 12,\n              complete: false\n            }, {\n              reps: 12,\n              complete: false\n            }],\n            weight: Math.ceil(benchVal * 0.8 / 5) * 5\n          }, {\n            name: \"Cable Row\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.9 / 5) * 5\n          }, {\n            name: \"Rear Dumbbell Flye\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.075 / 5) * 5\n          }, {\n            name: \"Incline Dumbbell Press\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.35 / 5) * 5\n          }, {\n            name: \"Flat Bench Press\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.9 / 5) * 5\n          }];\n        } else {\n          name = \"Hams/Glutes \" + (i + 1);\n          number = 4;\n          exercises = [{\n            name: \"Dumbbell Walking Lunge\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(squatVal * 0.2 / 5) * 5\n          }, {\n            name: \"Romanian Deadlift\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(squatVal * 0.8 / 5) * 5\n          }, {\n            name: \"Hack Squat\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(squatVal * 0.5 / 5) * 5\n          }, {\n            name: \"Dumbbell Curl\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.15 / 5) * 5\n          }, {\n            name: \"Barbell Shrug\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(benchVal * 0.8 / 5) * 5\n          }, {\n            name: \"Smith Machine Calf Raise\",\n            sets: [{\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }, {\n              reps: 12,\n              completeReps: 0\n            }],\n            weight: Math.ceil(squatVal * 0.75 / 5) * 5\n          }];\n        }\n\n        plan.days.push({\n          name: name,\n          number: number,\n          date: dayDate.format(\"YYYY-MM-DD\"),\n          exercises: exercises\n        });\n      });\n    }\n\n    axios.post('/plans/add', {\n      name: 'Default',\n      startDate: plan.startDate,\n      user: plan.user,\n      days: plan.days\n    }).then(res => {\n      console.log(res.data);\n      passUpPlan(res.data);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 17\n    }\n  }, \"Bench Press (10RM)\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    value: benchVal,\n    onChange: e => setBenchVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 17\n    }\n  }, \"Squat (10RM)\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    value: squatVal,\n    onChange: e => setSquatVal(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 17\n    }\n  }, \"Plan Start Date\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"date\",\n    value: date,\n    onChange: e => setDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 17\n    }\n  }, \"Days of Week (Select 4)\"), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    label: \"Sunday\",\n    value: \"0\",\n    onClick: e => handleCheckToggle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    label: \"Monday\",\n    value: \"1\",\n    onClick: e => handleCheckToggle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    label: \"Tuesday\",\n    value: \"2\",\n    onClick: e => handleCheckToggle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    label: \"Wednesday\",\n    value: \"3\",\n    onClick: e => handleCheckToggle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    label: \"Thursday\",\n    value: \"4\",\n    onClick: e => handleCheckToggle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    label: \"Friday\",\n    value: \"5\",\n    onClick: e => handleCheckToggle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    label: \"Saturday\",\n    value: \"6\",\n    onClick: e => handleCheckToggle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 13\n    }\n  }, \"Make My Plan!\"));\n};\n\nexport default PlanForm;","map":{"version":3,"sources":["/Users/kieferslaton/workout/client/src/components/PlanForm.js"],"names":["React","useState","Form","Button","moment","axios","PlanForm","user","passUpPlan","benchVal","setBenchVal","squatVal","setSquatVal","date","setDate","days","setDays","handleCheckToggle","val","includes","length","newDays","splice","console","log","push","filter","day","handleSubmit","e","preventDefault","plan","startDate","startOfWeek","username","firstCycleWeeks","i","add","forEach","index","name","number","exercises","dayDate","sets","reps","completeReps","weight","Math","ceil","complete","format","post","then","res","data","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport moment from 'moment'\nimport axios from 'axios'\n\nconst PlanForm = ( { user, passUpPlan }) => {\n    const [benchVal, setBenchVal] = useState('')\n    const [squatVal, setSquatVal] = useState('')\n    const [date, setDate] = useState('')\n    const [days, setDays] = useState([])\n\n    const handleCheckToggle = (val) => {\n        if (!days.includes(val)){\n            if(days.length <=4){\n            setDays([...days, val])\n            } else {\n                let newDays = days.splice(-1, 1)\n                console.log(newDays)\n                newDays.push(val)\n                setDays(newDays)\n            }\n        } else {\n            setDays(days.filter(day => day !== val))\n        }\n\n        console.log(days)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        console.log(benchVal, squatVal, date, days)\n        let plan = {}\n        plan.startDate = date.startOfWeek()\n        plan.user = user.username\n        plan.days = []\n\n        //First Mesocycle\n        let firstCycleWeeks = 5\n        for (let i = 0; i < firstCycleWeeks; i++){\n            const startOfWeek = moment(date).add(i*7, 'days')\n            days.forEach((day, index) => {\n                let name\n                let number\n                let exercises = []\n                const dayDate = moment(startOfWeek).add(day, 'days')\n                if(index === 0){\n                    name = \"Chest \"+(i+1)\n                    number = 1\n                    exercises = [\n                        {\n                            name: \"Incline Dumbbell Press\",\n                            sets: [\n                                {reps: 12, \n                                completeReps: 0},\n                                {reps: 12, \n                                completeReps: 0},\n                                {reps: 12, \n                                completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal*0.35)/5)*5,\n                        },\n                        {\n                            name: \"Dumbbell Overhead Extension\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal*0.35)/5)*5,\n                        },\n                        {\n                            name: \"Flat Bench Press\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal*0.8)/5)*5,\n                        },\n                        {\n                            name: \"1-Arm Dumbbell Row\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ],  \n                            weight: Math.ceil((benchVal*0.4)/5)*5,\n                        },\n                        {\n                            name: \"Pullup\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal)/5)*5,\n                        },\n                        {\n                            name: \"Dumbbell Lateral Raise\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal*0.075)/5)*5,\n                        }\n                    ]\n                } else if (index === 1){\n                    name = \"Quads \"+(i+1)\n                    number = 2\n                    exercises = [\n                        {\n                            name: \"Close Stance Squat\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((squatVal*0.8)/5)*5,\n                        },\n                        {\n                            name: \"Front Squat\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((squatVal*0.75)/5)*5,\n                        },\n                        {\n                            name: \"Single Leg Curl\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ],  \n                            weight: Math.ceil((squatVal*0.25)/5)*5,\n                        },\n                        {\n                            name: \"Calf Raises\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((squatVal*0.7)/5)*5,\n                        },\n                        {\n                            name: \"Cable Tricep Pushdown\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ],  \n                            weight: Math.ceil((benchVal*0.7)/5)*5,\n                        },\n                        {\n                            name: \"Seated Dumbbell Shoulder Press\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal*0.25)/5)*5,\n                        }\n                    ]\n                } else if(index === 2){\n                    name = \"Back \"+(i+1)\n                    number = 3\n                    exercises = [\n                        {\n                            name: \"Chin-up\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal)/5)*5,\n                        },\n                        {\n                            name: \"Lat Pulldown\",\n                            sets: [\n                                {reps: 12, \n                                complete: false},\n                                {reps: 12, \n                                complete: false},\n                                {reps: 12, \n                                complete: false}\n                            ], \n                            weight: Math.ceil((benchVal*0.8)/5)*5,\n                        },\n                        {\n                            name: \"Cable Row\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ],  \n                            weight: Math.ceil((benchVal*0.9)/5)*5,\n                        },\n                        {\n                            name: \"Rear Dumbbell Flye\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal*0.075)/5)*5,\n                        },\n                        {\n                            name: \"Incline Dumbbell Press\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal*0.35)/5)*5,\n                        },\n                        {\n                            name: \"Flat Bench Press\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ],  \n                            weight: Math.ceil((benchVal*0.9)/5)*5,\n                        }\n                    ]\n                } else {\n                    name = \"Hams/Glutes \"+(i+1)\n                    number = 4\n                    exercises = [\n                        {\n                            name: \"Dumbbell Walking Lunge\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ],  \n                            weight: Math.ceil((squatVal*0.2)/5)*5,\n                        },\n                        {\n                            name: \"Romanian Deadlift\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ],  \n                            weight: Math.ceil((squatVal*0.8)/5)*5,\n                        },\n                        {\n                            name: \"Hack Squat\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((squatVal*0.5)/5)*5,\n                        },\n                        {\n                            name: \"Dumbbell Curl\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ],  \n                            weight: Math.ceil((benchVal*0.15)/5)*5,\n                        },\n                        {\n                            name: \"Barbell Shrug\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ], \n                            weight: Math.ceil((benchVal*0.8)/5)*5,\n                        },\n                        {\n                            name: \"Smith Machine Calf Raise\",\n                            sets: [\n                                {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                                    {reps: 12, \n                                    completeReps: 0},\n                            ],  \n                            weight: Math.ceil((squatVal*0.75)/5)*5,\n                        }\n                    ]\n                }\n\n                plan.days.push({\n                    name: name,\n                    number: number, \n                    date: dayDate.format(\"YYYY-MM-DD\"),\n                    exercises: exercises\n                })\n            })\n        }\n\n        axios.post('/plans/add', {\n            name: 'Default',\n            startDate: plan.startDate,\n            user: plan.user,\n            days: plan.days\n        }).then(res => {\n            console.log(res.data)\n            passUpPlan(res.data)\n        })\n    }\n\n    return(\n        <Form onSubmit={handleSubmit}> \n            <Form.Group>\n                <Form.Label>Bench Press (10RM)</Form.Label>\n                <Form.Control type=\"text\" value={benchVal} onChange={(e) => setBenchVal(e.target.value)} />\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>Squat (10RM)</Form.Label>\n                <Form.Control type=\"text\" value={squatVal} onChange={(e) => setSquatVal(e.target.value)} />\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>Plan Start Date</Form.Label>\n                <Form.Control type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} />\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>Days of Week (Select 4)</Form.Label>\n                <Form.Check type=\"checkbox\" label=\"Sunday\" value='0' onClick={(e) => handleCheckToggle(e.target.value)} />\n                <Form.Check type=\"checkbox\" label=\"Monday\" value='1' onClick={(e) => handleCheckToggle(e.target.value)} />\n                <Form.Check type=\"checkbox\" label=\"Tuesday\" value='2' onClick={(e) => handleCheckToggle(e.target.value)} />\n                <Form.Check type=\"checkbox\" label=\"Wednesday\" value='3' onClick={(e) => handleCheckToggle(e.target.value)} />\n                <Form.Check type=\"checkbox\" label=\"Thursday\" value='4' onClick={(e) => handleCheckToggle(e.target.value)} />\n                <Form.Check type=\"checkbox\" label=\"Friday\" value='5' onClick={(e) => handleCheckToggle(e.target.value)} />\n                <Form.Check type=\"checkbox\" label=\"Saturday\" value='6' onClick={(e) => handleCheckToggle(e.target.value)} />\n            </Form.Group>\n            <Button type=\"submit\">Make My Plan!</Button>\n        </Form>\n    )\n}\n\nexport default PlanForm"]},"metadata":{},"sourceType":"module"}