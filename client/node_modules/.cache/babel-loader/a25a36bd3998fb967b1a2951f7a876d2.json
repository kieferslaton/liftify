{"ast":null,"code":"var _jsxFileName = \"/Users/kieferslaton/workout/client/src/components/Exercise.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport moment from 'moment';\nimport Set from './Set';\n\nconst Exercise = ({\n  plan,\n  workoutDay,\n  name,\n  refreshPlan\n}) => {\n  const day = plan.days.find(day => day.date === workoutDay);\n  const nextWeek = plan.days.find(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'));\n  const nextWeekIndex = plan.days.findIndex(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'));\n  const exercise = day.exercises.find(exercise => exercise.name === name);\n  const nextWeekExercise = nextWeek ? nextWeek.exercises.find(exercise => exercise.name === name) : '';\n  const nextWeekExerciseIndex = nextWeek ? nextWeek.exercises.findIndex(exercise => exercise.name == name) : '';\n  const [sets, setSets] = useState(exercise.sets);\n  const [sumReps, setSumReps] = useState();\n\n  const passback = async (reps, isComplete, i) => {\n    const newSets = sets.filter(index => index !== i);\n    console.log(newSets);\n  };\n\n  const updatePlan = () => {\n    if (!nextWeek) {\n      return;\n    } else {\n      let newExercise = {\n        name: nextWeekExercise.name,\n        sets: nextWeekExercise.sets,\n        weight: nextWeekExercise.weight\n      };\n\n      if (sumReps > 30) {\n        newExercise.sets += 1;\n      }\n\n      let newDay = {\n        name: nextWeek.name,\n        date: nextWeek.date,\n        exercises: nextWeek.exercises\n      };\n      newDay.exercises[nextWeekExerciseIndex] = newExercise;\n      let newPlan = {\n        _id: plan._id,\n        name: plan.name,\n        startDate: plan.startDate,\n        user: plan.user,\n        days: plan.days\n      };\n      newPlan.days[nextWeekIndex] = newDay;\n      refreshPlan(newPlan);\n    }\n  };\n\n  useEffect(() => {\n    repAdd(sets);\n  }, [sets]);\n  useEffect(() => {\n    updatePlan();\n  }, [sumReps]);\n\n  const repAdd = sets => {\n    let sum = 0;\n    sets.forEach(set => {\n      sum += set.reps;\n    });\n    setSumReps(sum);\n  };\n\n  const isEnabled = j => {\n    return j === 0 ? true : sets.filter(set => set.i === j - 1)[0] ? sets.filter(set => set.i === j - 1)[0].isComplete : false;\n  };\n\n  const renderSets = sets => {\n    let row = [];\n\n    for (let i = 0; i < sets.length; i++) {\n      row.push( /*#__PURE__*/React.createElement(Set, {\n        i: i,\n        startingReps: sets[i].reps,\n        complete: sets[i].complete,\n        passback: passback,\n        enabled: isEnabled(i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Row, {\n      className: \"my-3 justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 16\n      }\n    }, row);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, exercise.name), renderSets(sets), JSON.stringify(sets), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 35\n    }\n  }), sumReps, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 22\n    }\n  }));\n};\n\nexport default Exercise;","map":{"version":3,"sources":["/Users/kieferslaton/workout/client/src/components/Exercise.js"],"names":["React","useState","useEffect","Row","Col","moment","Set","Exercise","plan","workoutDay","name","refreshPlan","day","days","find","date","nextWeek","add","format","nextWeekIndex","findIndex","exercise","exercises","nextWeekExercise","nextWeekExerciseIndex","sets","setSets","sumReps","setSumReps","passback","reps","isComplete","i","newSets","filter","index","console","log","updatePlan","newExercise","weight","newDay","newPlan","_id","startDate","user","repAdd","sum","forEach","set","isEnabled","j","renderSets","row","length","push","complete","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport moment from 'moment'\n\nimport Set from './Set'\n\nconst Exercise = ({plan, workoutDay, name, refreshPlan}) => {\n\n    const day = plan.days.find(day => day.date === workoutDay)\n    const nextWeek = plan.days.find(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'))\n    const nextWeekIndex = plan.days.findIndex(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'))\n    const exercise = day.exercises.find(exercise => exercise.name === name)\n    const nextWeekExercise = nextWeek ? nextWeek.exercises.find(exercise => exercise.name === name) : ''\n    const nextWeekExerciseIndex = nextWeek ? nextWeek.exercises.findIndex(exercise => exercise.name == name) : ''\n\n    const [sets, setSets] = useState(exercise.sets)\n    const [sumReps, setSumReps] = useState()\n    \n    const passback = async (reps, isComplete, i) => {\n        const newSets = sets.filter(index => index !== i)\n        console.log(newSets);\n    }\n\n    const updatePlan = () => {\n        if(!nextWeek){\n            return\n        } else {\n        let newExercise = {\n            name: nextWeekExercise.name, \n            sets: nextWeekExercise.sets,\n            weight: nextWeekExercise.weight, \n        }\n        if (sumReps > 30) {\n            newExercise.sets += 1\n        }\n\n        let newDay = {\n            name : nextWeek.name, \n            date: nextWeek.date, \n            exercises: nextWeek.exercises\n        }\n\n        newDay.exercises[nextWeekExerciseIndex] = newExercise\n\n        let newPlan = {\n            _id: plan._id, \n            name: plan.name,\n            startDate: plan.startDate, \n            user: plan.user,\n            days: plan.days\n        }\n\n        newPlan.days[nextWeekIndex] = newDay\n\n        refreshPlan(newPlan)\n        }\n    }\n\n    useEffect(() => {\n        repAdd(sets)\n    }, [sets])\n\n    useEffect(() => {\n        updatePlan()\n    }, [sumReps])\n\n    const repAdd = (sets) => {\n        let sum = 0\n        sets.forEach(set => {\n            sum+=set.reps\n        })\n        setSumReps(sum)\n    }\n\n    const isEnabled = (j) => {\n        return(\n        j === 0 ? true : (sets.filter(set => set.i === j-1)[0] ? (sets.filter(set => set.i === j-1)[0].isComplete) : false)\n        )\n    }\n\n    const renderSets = (sets) => {\n        let row = []\n        for (let i = 0; i < sets.length; i++){\n            row.push(\n                <Set i={i} startingReps={sets[i].reps} complete={sets[i].complete} passback={passback} enabled={isEnabled(i)}/>\n            )\n        }\n        return <Row className=\"my-3 justify-content-center\">{row}</Row>\n    } \n\n    return (\n        <>\n            <Row className=\"my-3\">{exercise.name}</Row>\n            {renderSets(sets)}\n            {JSON.stringify(sets)}<br />\n            {sumReps}<br />\n            </>\n    )\n}\n\nexport default Exercise"]},"metadata":{},"sourceType":"module"}