{"ast":null,"code":"var _jsxFileName = \"/Users/kieferslaton/workout/client/src/components/Exercise.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Set from './Set';\n\nconst Exercise = ({\n  exercise,\n  nextWeekExercise,\n  updateNextWeekExercise\n}) => {\n  const [sets, setSets] = useState([]);\n  const [sumReps, setSumReps] = useState();\n\n  const passback = (reps, isComplete, i) => {\n    setSets([...sets.filter(set => set.i !== i), {\n      reps: reps,\n      isComplete: isComplete,\n      i: i\n    }]);\n    let sum = repAdd(sets);\n    console.log(sum);\n    setSumReps(sum);\n    updateNextWeekExercise(sumReps, exercise.name, exercise.sets);\n  };\n\n  const repAdd = sets => {\n    let sum = 0;\n    sets.forEach(set => {\n      sum += set.reps;\n    });\n    return sum;\n  };\n\n  const isEnabled = j => {\n    return j === 0 ? true : sets.filter(set => set.i === j - 1)[0] ? sets.filter(set => set.i === j - 1)[0].isComplete : false;\n  };\n\n  const renderSets = (sets, reps) => {\n    let row = [];\n\n    for (let i = 0; i < sets; i++) {\n      row.push( /*#__PURE__*/React.createElement(Set, {\n        i: i,\n        startingReps: reps,\n        passback: passback,\n        enabled: isEnabled(i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Row, {\n      className: \"my-3 justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 16\n      }\n    }, row);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, exercise.name), renderSets(exercise.sets, exercise.reps), JSON.stringify(sets), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 35\n    }\n  }), JSON.stringify(nextWeekExercise), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 47\n    }\n  }), sumReps, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 22\n    }\n  }));\n};\n\nexport default Exercise;","map":{"version":3,"sources":["/Users/kieferslaton/workout/client/src/components/Exercise.js"],"names":["React","useState","useEffect","Row","Col","Set","Exercise","exercise","nextWeekExercise","updateNextWeekExercise","sets","setSets","sumReps","setSumReps","passback","reps","isComplete","i","filter","set","sum","repAdd","console","log","name","forEach","isEnabled","j","renderSets","row","push","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\n\nimport Set from './Set'\n\nconst Exercise = ({exercise, nextWeekExercise, updateNextWeekExercise}) => {\n    const [sets, setSets] = useState([])\n    const [sumReps, setSumReps] = useState()\n\n    \n    const passback = (reps, isComplete, i) => {\n        setSets([...sets.filter(set => set.i !== i), {\n            reps: reps, \n            isComplete: isComplete, \n            i: i\n        }])\n        let sum = repAdd(sets)\n        console.log(sum)\n        setSumReps(sum)\n        updateNextWeekExercise(sumReps, exercise.name, exercise.sets)\n    }\n\n    const repAdd = (sets) => {\n        let sum = 0\n        sets.forEach(set => {\n            sum+=set.reps\n        })\n        return sum\n    }\n\n    const isEnabled = (j) => {\n        return(\n        j === 0 ? true : (sets.filter(set => set.i === j-1)[0] ? (sets.filter(set => set.i === j-1)[0].isComplete) : false)\n        )\n    }\n\n    const renderSets = (sets, reps) => {\n        let row = []\n        for (let i = 0; i < sets; i++){\n            row.push(\n                <Set i={i} startingReps={reps} passback={passback} enabled={isEnabled(i)}/>\n            )\n        }\n        return <Row className=\"my-3 justify-content-center\">{row}</Row>\n    } \n\n    return (\n        <>\n            <Row className=\"my-3\">{exercise.name}</Row>\n            {renderSets(exercise.sets, exercise.reps)}\n            {JSON.stringify(sets)}<br />\n            {JSON.stringify(nextWeekExercise)}<br />\n            {sumReps}<br />\n            </>\n    )\n}\n\nexport default Exercise"]},"metadata":{},"sourceType":"module"}