{"ast":null,"code":"var _jsxFileName = \"/Users/kieferslaton/workout/client/src/components/Exercise.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport moment from 'moment';\nimport Set from './Set';\n\nconst Exercise = ({\n  plan,\n  workoutDay,\n  name\n}) => {\n  const [sets, setSets] = useState([]);\n  const [sumReps, setSumReps] = useState();\n  const day = plan.days.find(day => day.date === workoutDay);\n  const nextWeek = plan.days.find(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'));\n  const nextWeekIndex = plan.days.findIndex(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'));\n  const exercise = day.exercises.find(exercise => exercise.name === name);\n  const nextWeekExercise = nextWeek ? nextWeek.exercises.find(exercise => exercise.name === name) : '';\n  const nextWeekExerciseIndex = nextWeek ? nextWeek.exercises.findIndex(exercise => exercise.name == name) : '';\n\n  const passback = async (reps, isComplete, i) => {\n    setSets([...sets.filter(set => set.i !== i), {\n      reps: reps,\n      isComplete: isComplete,\n      i: i\n    }]);\n  };\n\n  const updatePlan = () => {\n    let newExercise = {\n      name: nextWeekExercise.name,\n      sets: nextWeekExercise.sets,\n      reps: nextWeekExercise.reps,\n      weight: nextWeekExercise.weight,\n      complete: nextWeekExercise.complete\n    };\n\n    if (sumReps > 30) {\n      newExercise.sets += 1;\n    }\n\n    let newDay = {\n      name: nextWeek.name,\n      date: nextWeek.date,\n      exercises: nextWeek.exercises\n    };\n    newDay.exercises[nextWeekExerciseIndex] = newExercise;\n    let newPlan = {\n      name: plan.name,\n      startDate: plan.startDate,\n      user: plan.user,\n      days: plan.days\n    };\n    newPlan.days[nextWeekIndex] = newDay;\n    console.log(newPlan);\n  };\n\n  useEffect(() => {\n    repAdd(sets);\n  }, [sets]);\n  useEffect(() => {\n    updatePlan();\n  }, [sumReps]);\n\n  const repAdd = sets => {\n    let sum = 0;\n    sets.forEach(set => {\n      sum += set.reps;\n    });\n    setSumReps(sum);\n  };\n\n  const isEnabled = j => {\n    return j === 0 ? true : sets.filter(set => set.i === j - 1)[0] ? sets.filter(set => set.i === j - 1)[0].isComplete : false;\n  };\n\n  const renderSets = (sets, reps) => {\n    let row = [];\n\n    for (let i = 0; i < sets; i++) {\n      row.push( /*#__PURE__*/React.createElement(Set, {\n        i: i,\n        startingReps: reps,\n        passback: passback,\n        enabled: isEnabled(i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Row, {\n      className: \"my-3 justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 16\n      }\n    }, row);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, exercise.name), renderSets(exercise.sets, exercise.reps), JSON.stringify(sets), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 35\n    }\n  }), sumReps, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 22\n    }\n  }));\n};\n\nexport default Exercise;","map":{"version":3,"sources":["/Users/kieferslaton/workout/client/src/components/Exercise.js"],"names":["React","useState","useEffect","Row","Col","moment","Set","Exercise","plan","workoutDay","name","sets","setSets","sumReps","setSumReps","day","days","find","date","nextWeek","add","format","nextWeekIndex","findIndex","exercise","exercises","nextWeekExercise","nextWeekExerciseIndex","passback","reps","isComplete","i","filter","set","updatePlan","newExercise","weight","complete","newDay","newPlan","startDate","user","console","log","repAdd","sum","forEach","isEnabled","j","renderSets","row","push","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport moment from 'moment'\n\nimport Set from './Set'\n\nconst Exercise = ({plan, workoutDay, name}) => {\n    const [sets, setSets] = useState([])\n    const [sumReps, setSumReps] = useState()\n\n    const day = plan.days.find(day => day.date === workoutDay)\n    const nextWeek = plan.days.find(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'))\n    const nextWeekIndex = plan.days.findIndex(day => day.date === moment(workoutDay).add(7, 'days').format('YYYY-MM-DD'))\n    const exercise = day.exercises.find(exercise => exercise.name === name)\n    const nextWeekExercise = nextWeek ? nextWeek.exercises.find(exercise => exercise.name === name) : ''\n    const nextWeekExerciseIndex = nextWeek ? nextWeek.exercises.findIndex(exercise => exercise.name == name) : ''\n\n    \n    const passback = async (reps, isComplete, i) => {\n        setSets([...sets.filter(set => set.i !== i), {\n            reps: reps, \n            isComplete: isComplete, \n            i: i\n        }])\n    }\n\n    const updatePlan = () => {\n        let newExercise = {\n            name: nextWeekExercise.name, \n            sets: nextWeekExercise.sets,\n            reps: nextWeekExercise.reps, \n            weight: nextWeekExercise.weight, \n            complete: nextWeekExercise.complete\n        }\n        if (sumReps > 30) {\n            newExercise.sets += 1\n        }\n\n        let newDay = {\n            name : nextWeek.name, \n            date: nextWeek.date, \n            exercises: nextWeek.exercises\n        }\n\n        newDay.exercises[nextWeekExerciseIndex] = newExercise\n\n        let newPlan = {\n            name: plan.name,\n            startDate: plan.startDate, \n            user: plan.user,\n            days: plan.days\n        }\n\n        newPlan.days[nextWeekIndex] = newDay\n\n        console.log(newPlan)\n    }\n\n    useEffect(() => {\n        repAdd(sets)\n    }, [sets])\n\n    useEffect(() => {\n        updatePlan()\n    }, [sumReps])\n\n    const repAdd = (sets) => {\n        let sum = 0\n        sets.forEach(set => {\n            sum+=set.reps\n        })\n        setSumReps(sum)\n    }\n\n    const isEnabled = (j) => {\n        return(\n        j === 0 ? true : (sets.filter(set => set.i === j-1)[0] ? (sets.filter(set => set.i === j-1)[0].isComplete) : false)\n        )\n    }\n\n    const renderSets = (sets, reps) => {\n        let row = []\n        for (let i = 0; i < sets; i++){\n            row.push(\n                <Set i={i} startingReps={reps} passback={passback} enabled={isEnabled(i)}/>\n            )\n        }\n        return <Row className=\"my-3 justify-content-center\">{row}</Row>\n    } \n\n    return (\n        <>\n            <Row className=\"my-3\">{exercise.name}</Row>\n            {renderSets(exercise.sets, exercise.reps)}\n            {JSON.stringify(sets)}<br />\n            {sumReps}<br />\n            </>\n    )\n}\n\nexport default Exercise"]},"metadata":{},"sourceType":"module"}