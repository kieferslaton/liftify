{"ast":null,"code":"var _jsxFileName = \"/Users/kieferslaton/workout/client/src/components/Exercise.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Set from './Set';\n\nconst Exercise = ({\n  exercise\n}) => {\n  const [sets, setSets] = useState([]);\n  const [sumReps, setSumReps] = useState();\n  useEffect(() => {\n    repAdd(sets);\n  }, [sets]);\n\n  const passback = (reps, isComplete, i) => {\n    setSets([...sets.filter(set => set.i !== i), {\n      reps: reps,\n      isComplete: isComplete,\n      i: i\n    }]);\n  };\n\n  const repAdd = sets => {\n    let sum = 0;\n    sets.forEach(set => {\n      console.log(sum);\n      console.log(set.reps);\n      sum += set.reps;\n      console.log(sum);\n    });\n    setSumReps(sum);\n  };\n\n  const renderSets = (sets, reps) => {\n    let row = [];\n\n    for (let i = 0; i < sets; i++) {\n      row.push( /*#__PURE__*/React.createElement(Set, {\n        i: i,\n        startingReps: reps,\n        passback: passback,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Row, {\n      className: \"my-3 justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 16\n      }\n    }, row);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, exercise.name), renderSets(exercise.sets, exercise.reps), JSON.stringify(sets), sumReps);\n};\n\nexport default Exercise;","map":{"version":3,"sources":["/Users/kieferslaton/workout/client/src/components/Exercise.js"],"names":["React","useState","useEffect","Row","Col","Set","Exercise","exercise","sets","setSets","sumReps","setSumReps","repAdd","passback","reps","isComplete","i","filter","set","sum","forEach","console","log","renderSets","row","push","name","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AAEA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,MAAM,CAACJ,IAAD,CAAN;AACH,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,QAAMK,QAAQ,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,CAAnB,KAAyB;AACtCP,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAI,CAACS,MAAL,CAAYC,GAAG,IAAIA,GAAG,CAACF,CAAJ,KAAUA,CAA7B,CAAJ,EAAqC;AACzCF,MAAAA,IAAI,EAAEA,IADmC;AAEzCC,MAAAA,UAAU,EAAEA,UAF6B;AAGzCC,MAAAA,CAAC,EAAEA;AAHsC,KAArC,CAAD,CAAP;AAKH,GAND;;AAQA,QAAMJ,MAAM,GAAIJ,IAAD,IAAU;AACrB,QAAIW,GAAG,GAAG,CAAV;AACAX,IAAAA,IAAI,CAACY,OAAL,CAAaF,GAAG,IAAI;AAChBG,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACJ,IAAhB;AACAK,MAAAA,GAAG,IAAED,GAAG,CAACJ,IAAT;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACH,KALD;AAMAR,IAAAA,UAAU,CAACQ,GAAD,CAAV;AACH,GATD;;AAWA,QAAMI,UAAU,GAAG,CAACf,IAAD,EAAOM,IAAP,KAAgB;AAC/B,QAAIU,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAApB,EAA0BQ,CAAC,EAA3B,EAA8B;AAC1BQ,MAAAA,GAAG,CAACC,IAAJ,eACI,oBAAC,GAAD;AAAK,QAAA,CAAC,EAAET,CAAR;AAAW,QAAA,YAAY,EAAEF,IAAzB;AAA+B,QAAA,QAAQ,EAAED,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;;AACD,wBAAO,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8CW,GAA9C,CAAP;AACH,GARD;;AAUA,sBACI,uDACI,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBjB,QAAQ,CAACmB,IAAhC,CADJ,EAEKH,UAAU,CAAChB,QAAQ,CAACC,IAAV,EAAgBD,QAAQ,CAACO,IAAzB,CAFf,EAGKa,IAAI,CAACC,SAAL,CAAepB,IAAf,CAHL,EAIKE,OAJL,CADJ;AAQH,CA7CD;;AA+CA,eAAeJ,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\n\nimport Set from './Set'\n\nconst Exercise = ({exercise}) => {\n    const [sets, setSets] = useState([])\n    const [sumReps, setSumReps] = useState()\n\n    useEffect(() => {\n        repAdd(sets)\n    }, [sets])\n    \n    const passback = (reps, isComplete, i) => {\n        setSets([...sets.filter(set => set.i !== i), {\n            reps: reps, \n            isComplete: isComplete, \n            i: i\n        }])\n    }\n\n    const repAdd = (sets) => {\n        let sum = 0\n        sets.forEach(set => {\n            console.log(sum)\n            console.log(set.reps)\n            sum+=set.reps\n            console.log(sum)\n        })\n        setSumReps(sum)\n    }\n\n    const renderSets = (sets, reps) => {\n        let row = []\n        for (let i = 0; i < sets; i++){\n            row.push(\n                <Set i={i} startingReps={reps} passback={passback} />\n            )\n        }\n        return <Row className=\"my-3 justify-content-center\">{row}</Row>\n    } \n\n    return (\n        <>\n            <Row className=\"my-3\">{exercise.name}</Row>\n            {renderSets(exercise.sets, exercise.reps)}\n            {JSON.stringify(sets)}\n            {sumReps}\n            </>\n    )\n}\n\nexport default Exercise"]},"metadata":{},"sourceType":"module"}